
#java设计模式四（建造者模式/生成器模式）

生成器模式的功能

生成器模式的主要功能是构建复杂的产品，而且是细化的，分步骤的构建产品，
也就是生成器模式重在一步一步解决构造复杂对象的问题。
更为重要的是，这个构建的过程是统一的、固定不变的，变化的部分放到生成器部分了，
只要配置不同的生成器，那么同样的构建过程，就能构建出不同的产品来。

生成器模式的优点
一、松散耦合
生成器模式可以用同一个构建算法构建出表现上完全不同的产品，实现产品构建和产品表现上的分离。
生成器模式正是把产品构建的过程独立出来，使它和具体产品的表现分松散耦合，从而使得构建算法可以复用，
而具体产品表现也可以很灵活地、方便地扩展和切换。
二、可以很容易的改变产品的内部表示
在生成器模式中，由于Builder对象只是提供接口给Director使用，那么具体部件创建和装配方式是被Builder接口隐藏了的，
Director并不知道这些具体的实现细节。这样一来，要想改变产品的内部表示，只需要切换Builder接口的具体实现即可，
不用管Director，因此变得很容易。
三、更好的复用性
生成器模式很好的实现构建算法和具体产品实现的分离。这样一来，使得构建产品的算法可以复用。
同样的道理，具体产品的实现也可以复用，同一个产品的实现，可以配合不同的构建算法使用。

生成器模式的本质：分离整体构建算法和部件构造。
虽然在生成器模式的整体构建算法中，会一步一步引导Builder来构建对象，但这并不是说生成器主要就是用来实现分步骤构建对象的。
生成器模式的重心还是在于分离整体构建算法和部件构造，而分步骤构建对象不过是整体构建算法的一个简单表现，或者说是一个附带产物。

何时选用生成器模式
建议在以下情况中选用生成器模式。
如果创建对象的算法，应该独立于该对象的组成部分以及它们的装配方式时。
如果同一个构建过程有着不同的表示时。

总结：建造者模式与抽象工厂有着诸多相似之处。
	    建造者模式的Builder主要用于构建复杂对象，而导演者Director使用Builder以一个统一的过程构建对象。
	<遵循开闭原则，若要增加产品只需实现相应的Builder即可>
参考文章：http://blog.csdn.net/top_code/article/details/8469297